#!/bin/bash
set -euo pipefail

# Constants
SCRIPT_NAME="$(basename "$0")"
SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "$0")")" && pwd)"
VALID_ROS_VERSIONS=("noetic" "jazzy" "humble" "ros_noetic" "ros2_jazzy" "ros2_humble")
VALID_ROBOT_MODELS=("rosbot_xl" "rosbot_3" "rosbot_2r" "rosbot_2_pro" "panther" "lynx")

# Functions
check_root() {
  if [[ "$EUID" -eq 0 ]]; then
    return 0
  else
    echo "Error: This script must be run as root." >&2
    return 1
  fi
}

print_header() {
  echo -e "\n$1"
  echo "---------------------------------------"
}

resize_filesystem() {
  echo "Resizing the file system..."
  local root_device partition_suffix partition_number
  root_device=/dev/$(lsblk -no PKNAME,MOUNTPOINT | awk '$2 == "/" {print $1}')
  partition_suffix=$(lsblk -no KNAME,MOUNTPOINT | awk '$2 == "/" {gsub(/.*[^0-9]/, "", $1); print $1}')

  if [[ $root_device == /dev/sd* ]]; then
    partition_number="$partition_suffix"
  else
    partition_number="p$partition_suffix"
  fi

  sudo growpart ${root_device} ${partition_suffix} || true
  sudo resize2fs ${root_device}${partition_number}
}

check_args() {
  [[ $# -eq 2 || ($# -eq 1 && -n "${IMAGE_TYPE:-}") ]] && return 0
  [[ $# -eq 0 ]] && echo "Robot model unspecified. Use simple configuration." && return 0
  echo "Usage: $SCRIPT_NAME <robot_model> [ros_version]"
  exit 1
}

validate_robot_model() {
  local model="$1"
  if [[ -z "$model" || ! " ${VALID_ROBOT_MODELS[*]} " =~ " $model " ]]; then
    echo "Error: Invalid robot model: $model. Valid: ${VALID_ROBOT_MODELS[*]}" >&2
    echo "Usage: $SCRIPT_NAME <robot_model> [ros_version]" >&2
    exit 1
  fi
  echo "$model"
}

validate_ros_version() {
  local version="${1:-}"
  if [[ -z "$version" && -n "$ROS_DISTRO" ]]; then
    version="$ROS_DISTRO"
  fi

  if [[ " ${VALID_ROS_VERSIONS[*]} " == *" $version "* ]]; then
    if [[ "$version" == "ros2_jazzy" || "$version" == "ros2_humble" ]]; then
      version="${version#ros2_}"  # Remove 'ros2_' prefix for compatibility
    fi
    if [[ "$version" == "ros_noetic" ]]; then
      version="noetic"  # Backward compatibility for ROS 1
    fi
    echo "$version"
  else
    echo "Error: Invalid ROS version: $version. Valid: ${VALID_ROS_VERSIONS[*]}" >&2
    echo "Usage: $SCRIPT_NAME <robot_model> [ros_version]" >&2
    exit 1
  fi
}

set_robot_model_env() {
  local model="$1"
  local version="$2"
  local env_file="/home/husarion/.robot_env"
  [ -f "$env_file" ] || touch "$env_file"

  # ROBOT_MODEL_NAME
  if grep -q "^ROBOT_MODEL_NAME=" "$env_file"; then
    sed -i "s/^ROBOT_MODEL_NAME=.*/ROBOT_MODEL_NAME=$model/" "$env_file"
  else
    echo "ROBOT_MODEL_NAME=$model" >> "$env_file"
  fi

  # SNAP_VERSION
  if grep -q "^SNAP_VERSION=" "$env_file"; then
    sed -i "s/^SNAP_VERSION=.*/SNAP_VERSION=$version/" "$env_file"
  else
    echo "SNAP_VERSION=$version" >> "$env_file"
  fi
}

robot_config() {
  local model="$1"
  local ros_version="$2"
  local folder="$model"

  [[ "$model" == "lynx" || "$model" == "panther" ]] && folder="husarion_ugv"

  local config_path="$SCRIPT_DIR/robots/$folder/$ros_version"
  if [[ -d "$config_path" ]]; then
    cp -rp "$SCRIPT_DIR/robots/helpers.sh" /home/husarion/
    cp -rp "$config_path/"* /home/husarion/
    bash "$SCRIPT_DIR/robots/$folder/custom_config.sh" "$model" "$ros_version"
  else
    echo "Warning: Config dir \"$config_path\" not found. Skipping robot-specific setup."
    exit
  fi
}

setup_motd() {
  local model="$1"
  local arch
  arch=$(uname -m)

  local deb_arch
  case "$arch" in
    x86_64)  deb_arch="amd64" ;;
    aarch64) deb_arch="arm64" ;;
    *) echo "Unsupported architecture: $arch"; exit 1 ;;
  esac

  local deb_file
  deb_file=$(find "$SCRIPT_DIR/robots/$model" -maxdepth 1 -type f -name "*husarion-motd-*-${deb_arch}.deb" | head -n 1)

  [[ -z "$deb_file" ]] && { echo "Error: No .deb file for arch $deb_arch"; exit 1; }

  echo "Installing MOTD package: $deb_file"
  dpkg -i "$deb_file" > /dev/null
}

network_setup() {
  local model="$1"
  local folder="$model"
  [[ "$model" == "lynx" || "$model" == "panther" ]] && folder="husarion_ugv"

  echo "Resetting Husarnet IPv6 and network configuration"
  cp "$SCRIPT_DIR/robots/$folder/netplan.yaml" /etc/netplan/01-network-manager-all.yaml
  chmod 600 /etc/netplan/01-network-manager-all.yaml

  rm -rf /var/lib/husarnet

  echo "Generating new SSH credentials"
  : > /root/.ssh/authorized_keys
  : > /root/.ssh/known_hosts
  : > /home/husarion/.ssh/authorized_keys
  : > /home/husarion/.ssh/known_hosts
  rm -rf /etc/ssh/ssh_host_*
  ssh-keygen -A
}

# Main
check_root

print_header "Resizing the file system"
resize_filesystem $@

print_header "Validation and configuration"
check_args "$@"
if [[ -n "${1:-}" ]]; then
  robot_model=$(validate_robot_model "$1")
  ros_version=$(validate_ros_version "${2:-}")
  echo "Robot model: $robot_model"
  echo "ROS version: $ros_version"
  set_robot_model_env "$robot_model" "$ros_version"
  robot_config "$robot_model" "$ros_version"

  print_header "Setting up MOTD"
  setup_motd "$robot_model"

  print_header "Resetting network and SSH credentials"
  network_setup "$robot_model"
fi

echo
print_header "âœ… Configuration completed!"
