#!/bin/bash

# Constants
SCRIPT_NAME="$(basename "$0")"
SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "$0")")" && pwd)"
VALID_ROS_VERSIONS=("noetic" "jazzy" "humble" "ros_noetic" "ros2_jazzy" "ros2_humble")
VALID_ROBOT_MODELS=("rosbot_xl" "rosbot_3" "rosbot_2r" "rosbot_2_pro" "panther" "lynx" "husarion_ugv")

# Functions
set_robot_env() {
  local model="$1"
  local version="$2"
  local env_file="/etc/environment"
  [ -f "$env_file" ] || touch "$env_file"

  # ROBOT_MODEL_NAME
  if grep -q "^ROBOT_MODEL_NAME=" "$env_file"; then
    sed -i "s/^ROBOT_MODEL_NAME=.*/ROBOT_MODEL_NAME=$model/" "$env_file"
  else
    echo "ROBOT_MODEL_NAME=$model" >> "$env_file"
  fi

  # SNAP_VERSION
  if grep -q "^SNAP_VERSION=" "$env_file"; then
    sed -i "s/^SNAP_VERSION=.*/SNAP_VERSION=$version/" "$env_file"
  else
    echo "SNAP_VERSION=$version" >> "$env_file"
  fi
}


# Check if running with root privileges
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

echo "---------------------------------------"
echo "Starting the configuration script"
echo "---------------------------------------"

# resize fs
echo "Resizing the file system"

root_device=/dev/$(lsblk -no PKNAME,MOUNTPOINT | awk '$2 == "/" {print $1}')
partition_suffix=$(lsblk -no KNAME,MOUNTPOINT | awk '$2 == "/" {gsub(/.*[^0-9]/, "", $1); print $1}')

if [[ $root_device == /dev/sd* ]]; then
  partition_number="${partition_suffix}"
else
  partition_number="p${partition_suffix}"
fi

sudo growpart ${root_device} ${partition_suffix}
sudo resize2fs ${root_device}${partition_number}

# Parse command line arguments
if [[ $# -gt 2 ]]; then
    echo "Usage: $(basename "$0") ROBOT_MODEL ROS_VERSION"
    exit 0
fi

# ========================================
# Check ROS version
# ========================================

if [ -z "$2" ]; then
  if [ "$IMAGE_TYPE" == "ROS2_JAZZY" ]; then
    ros_version="ros2_jazzy"
  elif [ "$IMAGE_TYPE" == "ROS2_HUMBLE" ]; then
    ros_version="ros2_humble"
  elif [ "$IMAGE_TYPE" == "ROS2_FOXY" ]; then
    ros_version="ros2_humble"
  else
    echo "Error: No ROS version specified"
    exit 1
  fi
else
  valid=false
  for version in "${VALID_ROS_VERSIONS[@]}"; do
    if [[ "$2" == "$version" ]]; then
      valid=true
      ros_version="$2"
      break
    fi
  done

  if ! $valid; then
    echo "Error: Invalid ROS version specified: $2"
    echo "Usage: $(basename "$0") ROBOT_MODEL ROS_VERSION"
    echo "Valid ROS versions: ${VALID_ROS_VERSIONS[*]}"
    exit 1
  fi
fi

echo "ROS version: ${ros_version}"

# ========================================
# Check the robot model
# ========================================

# Get the directory where the script itself is located

if [ -z "$1" ]; then
  echo ""
  echo "Using default configuration"
  exit 0
else
  valid=false
  for model in "${VALID_ROBOT_MODELS[@]}"; do
    if [[ "$1" == "$model" ]]; then
      valid=true
      robot_model="$1"
      break
    fi
  done

  if ! $valid; then
    echo "Error: Invalid robot model: $1"
    echo "Usage: $(basename "$0") ROBOT_MODEL ROS_VERSION"
    echo "Valid robot models: ${VALID_ROBOT_MODELS[*]}"
    exit 1
  fi

  echo "Robot model: ${robot_model}"
  if [[ "$version" == "ros2_jazzy" || "$version" == "ros2_humble" ]]; then
    ros_distro="${ros_version#ros2_}"  # Remove 'ros2_' prefix for compatibility
  fi
  set_robot_env "$robot_model" "$ros_distro"

  folder="$robot_model"

  [[ "$model" == "lynx" || "$model" == "panther" ]] && folder="husarion_ugv"

  config_path="$SCRIPT_DIR/robots/$folder/$ros_version"
  if [[ -d "$config_path" ]]; then
    cp -rp "$SCRIPT_DIR/robots/helpers.sh" /home/husarion/
    cp -rp "$config_path/"* /home/husarion/
    bash "$SCRIPT_DIR/robots/$folder/custom_config.sh" "$model" "$ros_version"
  else
    echo "Warning: Config dir \"$config_path\" not found. Skipping robot-specific setup."
    exit
  fi

  ## install motd
  ARCH=$(uname -m)

  # Map uname -m to .deb architecture
  if [[ "$ARCH" == "x86_64" ]]; then
    DEB_ARCH="amd64"
  elif [[ "$ARCH" == "aarch64" ]]; then
    DEB_ARCH="arm64"
  else
    echo "Unsupported architecture: $ARCH"
    exit 1
  fi

  # Look for the matching .deb file using a regex pattern
  DEB_FILE=$(find "$SCRIPT_DIR/robots/${robot_model}" -maxdepth 1 -type f -regex ".*husarion-motd-.*-${DEB_ARCH}\.deb" | head -n 1)

  if [[ -z "$DEB_FILE" ]]; then
    echo "Error: No matching .deb file found for architecture: $DEB_ARCH"
    exit 1
  fi

  echo "Installing motd package: $DEB_FILE"
  # Install the package
  sudo dpkg -i "$DEB_FILE"
fi

# mkdir /home/husarion/.ros
# chown husarion:husarion /home/husarion/.ros

echo "Resetting the network configuration"
cp $SCRIPT_DIR/robots/${robot_model}/netplan.yaml /etc/netplan/01-network-manager-all.yaml
sudo chmod 600 /etc/netplan/01-network-manager-all.yaml

# Resetting Husarnet IPv6 address
echo "Resetting Husarnet IPv6 address"
sudo rm -rf /var/lib/husarnet

# Generating new SSH credentials
echo "Generating new SSH credentials"
sudo echo "" > /root/.ssh/authorized_keys
sudo echo "" > /root/.ssh/known_hosts
sudo echo "" > /home/husarion/.ssh/authorized_keys
sudo echo "" > /home/husarion/.ssh/known_hosts
sudo rm -rf /etc/ssh/ssh_host_*

ssh-keygen -A
# systemctl restart ssh.service

# Print success message
echo ""
echo "Configuration files copied successfully for robot model \"$robot_model\" and ROS version \"$ros_version\""
